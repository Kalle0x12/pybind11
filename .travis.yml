language: cpp
dist: trusty
sudo: false
matrix:
  include:
#  - os: linux
#    env: STYLE DOCS PIP
#    cache: false
#    before_install:
#    - pyenv global $(pyenv whence 2to3)
#    - PY_CMD=python3
#    - $PY_CMD -m pip install --user --upgrade pip wheel
#    install:
#    - $PY_CMD -m pip install --user --upgrade sphinx sphinx_rtd_theme breathe flake8
#      pep8-naming pytest
#    - curl -fsSL ftp://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.12.linux.bin.tar.gz
#      | tar xz
#    - export PATH="$PWD/doxygen-1.8.12/bin:$PATH"
  - os: linux
    env: PYTHON=2.7 CPP_STD=11 GCC=4.8
    addons:
      apt:
        packages:
        - cmake=2.\*
        - cmake-data=2.\*
  - os: linux
    env: PYTHON=3.6 CPP_STD=11 GCC=4.8
    addons:
      apt:
        sources:
        - deadsnakes
        packages:
        - python3.6-dev python3.6-venv
        - cmake=2.\*
        - cmake-data=2.\*
  - sudo: true
    services: docker
    env: PYTHON=2.7 CPP_STD=14 GCC=6 CMAKE=1
  - sudo: true
    services: docker
    env: PYTHON=3.5 CPP_STD=14 GCC=6 DEBUG=1
  - sudo: true
    services: docker
    env: PYTHON=3.6 CPP_STD=17 GCC=7
#  - os: linux
#    env: PYTHON=3.6 CPP_STD=17 CLANG=5.0
#    addons:
#      apt:
#        sources:
#        - deadsnakes
#        - llvm-toolchain-trusty-5.0
#        - ubuntu-toolchain-r-test
#        packages:
#        - python3.6-dev python3.6-venv clang-5.0 llvm-5.0-dev
#        - lld-5.0
  - os: osx
    osx_image: xcode7.3
    env: PYTHON=2.7 CPP_STD=14 CLANG CMAKE=1
  - os: osx
    osx_image: xcode9
    env: PYTHON=3.7 CPP_STD=14 CLANG DEBUG=1
  - os: linux
    env: PYPY=5.8 PYTHON=2.7 CPP_STD=11 GCC=4.8
    addons:
      apt:
        packages:
        - libblas-dev
        - liblapack-dev
        - gfortran
#  - sudo: true
#    services: docker
#    env: ARCH=i386 PYTHON=3.5 CPP_STD=14 GCC=6 INSTALL=1
#    script:
#    - |
#      $SCRIPT_RUN_PREFIX sh -c "set -e
#      cmake ${CMAKE_EXTRA_ARGS} -DPYBIND11_INSTALL=1 -DPYBIND11_TEST=0
#      make install
#      cp -a tests /pybind11-tests
#      mkdir /build-tests && cd /build-tests
#      cmake ../pybind11-tests ${CMAKE_EXTRA_ARGS} -DPYBIND11_WERROR=ON
#      make pytest -j 2"
cache:
  directories:
  - $HOME/.local/bin
  - $HOME/.local/lib
  - $HOME/.local/include
  - $HOME/Library/Python
before_install:
- |
  # Configure build variables
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    if [ -n "$CLANG" ]; then
      export CXX=clang++-$CLANG CC=clang-$CLANG
      EXTRA_PACKAGES+=" clang-$CLANG llvm-$CLANG-dev"
    else
      if [ -z "$GCC" ]; then GCC=4.8
      else EXTRA_PACKAGES+=" g++-$GCC"
      fi
      export CXX=g++-$GCC CC=gcc-$GCC
    fi
    if [ "$GCC" = "6" ]; then DOCKER=${ARCH:+$ARCH/}debian:stretch
    elif [ "$GCC" = "7" ]; then DOCKER=debian:buster EXTRA_PACKAGES+=" catch python3-distutils" DOWNLOAD_CATCH=OFF
    fi
  elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
    export CXX=clang++ CC=clang;
  fi
  if [ -n "$CPP_STD" ]; then CPP_STD=-std=c++$CPP_STD; fi
  if [ "${PYTHON:0:1}" = "3" ]; then PY=3; fi
  if [ -n "$DEBUG" ]; then CMAKE_EXTRA_ARGS+=" -DCMAKE_BUILD_TYPE=Debug"; fi
- |
  # Initialize environment
  set -e
  if [ -n "$DOCKER" ]; then
    docker pull $DOCKER

    containerid=$(docker run --detach --tty \
      --volume="$PWD":/pybind11 --workdir=/pybind11 \
      --env="CC=$CC" --env="CXX=$CXX" --env="DEBIAN_FRONTEND=$DEBIAN_FRONTEND" \
      --env=GCC_COLORS=\  \
      $DOCKER)
    SCRIPT_RUN_PREFIX="docker exec --tty $containerid"
    $SCRIPT_RUN_PREFIX sh -c 'for s in 0 15; do sleep $s; apt-get update && apt-get -qy dist-upgrade && break; done'
  else
    if [ "$PYPY" = "5.8" ]; then
      curl -fSL https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.8.0-linux64.tar.bz2 | tar xj
      PY_CMD=$(echo `pwd`/pypy2-v5.8.0-linux64/bin/pypy)
      CMAKE_EXTRA_ARGS+=" -DPYTHON_EXECUTABLE:FILEPATH=$PY_CMD"
    else
      PY_CMD=python$PYTHON
      if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        if [ "$PY" = "3" ]; then
          brew update && brew upgrade python
        else
          curl -fsSL https://bootstrap.pypa.io/get-pip.py | $PY_CMD - --user
        fi
      fi
    fi
    if [ "$PY" = 3 ] || [ -n "$PYPY" ]; then
      $PY_CMD -m ensurepip --user
    fi
    $PY_CMD -m pip install --user --upgrade pip wheel
  fi
  set +e
install:
- |
  # Install dependencies
  set -e
  if [ -n "$DOCKER" ]; then
    PY_CMD=/usr/bin/python${PYTHON}
    if [ -n "$DEBUG" ]; then
      PY_DEBUG="python$PYTHON-dbg python$PY-scipy-dbg"
      CMAKE_EXTRA_ARGS+=" -DPYTHON_EXECUTABLE=/usr/bin/python${PYTHON}dm"
      PY_CMD=/usr/bin/python${PYTHON}dm
    fi
    $SCRIPT_RUN_PREFIX sh -c "for s in 0 15; do sleep \$s; \
      apt-get -qy --no-install-recommends install \
        $PY_DEBUG python$PYTHON-dev python$PY-pytest python$PY-scipy python$PY-setuptools wget git-all patch   \
        libeigen3-dev libboost-dev cmake make ${EXTRA_PACKAGES} && break; done"
  else

    if [ "$CLANG" = "5.0" ]; then
      if ! [ -d ~/.local/include/c++/v1 ]; then
        # Neither debian nor llvm provide a libc++ 5.0 deb; luckily it's fairly quick
        # to build, install (and cache), so do it ourselves:
        git clone --depth=1 https://github.com/llvm-mirror/llvm.git llvm-source
        git clone https://github.com/llvm-mirror/libcxx.git llvm-source/projects/libcxx -b release_50
        git clone https://github.com/llvm-mirror/libcxxabi.git llvm-source/projects/libcxxabi -b release_50
        mkdir llvm-build && cd llvm-build
        # Building llvm requires a newer cmake than is provided by the trusty container:
        CMAKE_VER=cmake-3.8.0-Linux-x86_64
        curl https://cmake.org/files/v3.8/$CMAKE_VER.tar.gz | tar xz
        ./$CMAKE_VER/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=~/.local ../llvm-source
        make -j2 install-cxxabi install-cxx
        cp -a include/c++/v1/*cxxabi*.h ~/.local/include/c++/v1
        cd ..
      fi
      export CXXFLAGS="-isystem $HOME/.local/include/c++/v1 -stdlib=libc++"
      export LDFLAGS="-L$HOME/.local/lib -fuse-ld=lld-$CLANG"
      export LD_LIBRARY_PATH="$HOME/.local/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
      if [ "$CPP_STD" = "-std=c++17" ]; then CPP_STD="-std=c++1z"; fi
    fi

    export NPY_NUM_BUILD_JOBS=2
    echo "Installing pytest, numpy, scipy..."
    ${PYPY:+travis_wait 30} $PY_CMD -m pip install --user --upgrade pytest numpy scipy \
        ${PYPY:+--extra-index-url https://imaginary.ca/trusty-pypi}
    echo "done."

    mkdir eigen
    curl -fsSL https://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2 | \
        tar --extract -j --directory=eigen --strip-components=1
    export CMAKE_INCLUDE_PATH="${CMAKE_INCLUDE_PATH:+$CMAKE_INCLUDE_PATH:}$PWD/eigen"
  fi
  set +e
script:
- $SCRIPT_RUN_PREFIX cmake ${CMAKE_EXTRA_ARGS} -DPYBIND11_PYTHON_VERSION=$PYTHON -DPYBIND11_CPP_STANDARD=$CPP_STD
  -DPYBIND11_WERROR=${WERROR:-ON} -DDOWNLOAD_CATCH=${DOWNLOAD_CATCH:-ON}
- $SCRIPT_RUN_PREFIX make pytest -j 2
- $SCRIPT_RUN_PREFIX make cpptest -j 2
- if [ -n "$CMAKE" ]; then $SCRIPT_RUN_PREFIX make test_cmake_build; fi
- $SCRIPT_RUN_PREFIX ls -alh
- $SCRIPT_RUN_PREFIX pwd
- $SCRIPT_RUN_PREFIX  ./install-lis.sh
- $SCRIPT_RUN_PREFIX  echo $LD_LIBRARY_PATH
- $SCRIPT_RUN_PREFIX pwd
- $SCRIPT_RUN_PREFIX ls -alh
- $SCRIPT_RUN_PREFIX echo $PYTHON
- $SCRIPT_RUN_PREFIX echo $PY_CMD
- $SCRIPT_RUN_PREFIX echo $CPP_STDV
- $SCRIPT_RUN_PREFIX echo $CMAKE_EXTRA_ARGS
- $SCRIPT_RUN_PREFIX echo $CMAKE_INCLUDE_PATH
- $SCRIPT_RUN_PREFIX echo $PY_CMD
- $SCRIPT_RUN_PREFIX which $PY_CMD
- |
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      $SCRIPT_RUN_PREFIX $PY_CMD build.py build_ext --inplace
   elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      $SCRIPT_RUN_PREFIX $PY_CMD build_mac.py build_ext --inplace
   fi
- $SCRIPT_RUN_PREFIX ls -alh
- $SCRIPT_RUN_PREFIX pwd
- $SCRIPT_RUN_PREFIX ./run_test.sh $PY_CMD
- $SCRIPT_RUN_PREFIX cat residuals.log
- |
  if [ "$GCC" = "7" ]; then
     export CMAKE_CXX_FLAGS=-fpermissive
  fi
- $SCRIPT_RUN_PREFIX  ./install-paralution.sh
- |
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      $SCRIPT_RUN_PREFIX $PY_CMD build-paral.py build_ext --inplace
   elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      $SCRIPT_RUN_PREFIX $PY_CMD build_mac-paral.py build_ext --inplace
   fi
- $SCRIPT_RUN_PREFIX ./run_test-paral.sh $PY_CMD

after_failure: cat tests/test_cmake_build/*.log*
after_script:
- if [ -n "$DOCKER" ]; then docker stop "$containerid"; docker rm "$containerid";
  fi
notifications:
  email:
    recipients: 
      secure: 0mm4pNf6eq9baChGh2HSBqsjuNTFEV1nAXD/ghclB3+dJYrf05ydFQNgxzrXcPpIYr35HHRoeeYn8nij185As/qgJN2h0+cru2kDfOwGVB0eaMCBK5/Mb3+p/zo7N8Ch8dq0FbyVd9OxcZDKinj0A/a5vVDdXHeELuhzCcUTqPFbuIkXYpQ80+ms4awtXLgee6tVwwchu4oVE8vx1fv1E3whrevxqy/Rkalu1J/bY0b/aMvUNt/x3vXv7e5i8eybMtTJIeFejLzPRPIdC2B126tdBTdWPOuRM5+3H1oM91x9BL+TeCLyjFxY5itIyrEvmeWQQBuTZRFVmtM2DwiQQJ4SFWEK+VbuilM+LLfZJEtn0kp9zQT/aSSfc1EHaLZ27UfWa9zEf4wLmWq91ug9lOojOInQBIsvJCL9e3YyE/d/iYg7H6nOlRoObFVsCDt4tw9ac2M/F47Ov6g0X3ytgSnKQpMpynHhN1OhCg+6tyLBq1GfLV3FnmvvrhfRLRxxGmvtxkC7MP1PkwxGXDuS8oUnoe3u1kK6fDtMP87SeoZvz4Fjn3hu8YPS6eAEbQQv8m2ReDHPnOqJKjQAgboWyMXnZCS/T1VDrT0iM+f1QgBoYyGXDg3DovSxQOKYirQ9h8X7AhvDaLtdmXdSKNGBOnjY2x4B7+5BuoKJ6cnUXWw=
    on_success: always
    on_failure: always
